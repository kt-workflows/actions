name: 'Setup concrete or latest/earliest Node.js environment'
description: 'Setup concrete latest/earliest Node.js environment from provided version array (i.e. like from matrix.node-version)'
author: 'GitHub (mod by kt-workflows/actions)'

# Interface from actions/setup-node@v4 with few custom parameters
inputs:
  always-auth:
    description: 'Set always-auth in npmrc.'
    default: 'false'
  node-version:
    description: 'Version Spec to use. Examples: 18, 18.x, 18.0.0, 18.0.x, 18.0.0-x, 18.0.0-x64.'
    required: false
  # Custom parameter
  matrix-node-version:
    description: 'Version Spec array, i.e. from matrix.node-version. Latest will be selected from this array and setup-node will be run with the selected version.'
    required: false
  # Custom parameter
  matrix-node-version-earliest:
    description: 'Set this option if you want the action to select for the earliest available version from the matrix.node-version array.'
    default: 'false'
  node-version-file:
    description: 'File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.'
  architecture:
    description: 'Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.'
  check-latest:
    description: 'Set this option if you want the action to check for the latest available version that satisfies the version spec.'
    default: 'false'
  registry-url:
    description: 'Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.'
  scope:
    description: 'Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).'
  token:
    description: Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
  cache:
    description: 'Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.'
  cache-dependency-path:
    description: 'Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.'
    default: '**/package-lock.json,**/yarn.lock,**/pnpm-lock.yaml'
  mirror:
    description: 'Used to specify an alternative mirror to downlooad Node.js binaries from'
  mirror-token:
    description: 'The token used as Authorization header when fetching from the mirror'

outputs:
  cache-hit:
    description: 'A boolean value to indicate if a cache was hit.'
    value: ${{ steps.setup-node.outputs.cache-hit }}
  node-version:
    description: 'The installed node version.'
    value: ${{ steps.setup-node.outputs.node-version }}

runs:
  using: composite
  steps:
    - id: select-node-version
      shell: bash
      # check inputs.node-version, if provided, use it
      # if not, check inputs.matrix-node-version, if provided, use it
      run: |
        if [[ -n "${{ inputs.node-version }}" ]]; then
          echo "version=${{ inputs.node-version }}" >> "$GITHUB_OUTPUT"
          echo "Node version provided: ${{ inputs.node-version }}"
        elif [[ -n "${{ inputs.matrix-node-version }}" ]]; then
          echo "Node version array provided: ${{ inputs.matrix-node-version }}"
          if [[ "${{ inputs.matrix-node-version-earliest }}" == "true" ]]; then
            echo "version=$(echo '${{ inputs.matrix-node-version }}' | jq -r '.[] | tostring' | sort -V | head -n 1)" >> "$GITHUB_OUTPUT"
            echo "Earliest version selected"
          else
            echo "version=$(echo '${{ inputs.matrix-node-version }}' | jq -r '.[] | tostring' | sort -V | tail -n 1)" >> "$GITHUB_OUTPUT"
            echo "Latest version selected"
          fi
        else
          echo "No node version provided default will be used"
        fi

    - id: setup-node
      uses: actions/setup-node@v4
      with:
        always-auth: ${{ inputs.always-auth }}
        node-version: ${{ steps.select-node-version.outputs.version }}
        node-version-file: ${{ inputs.node-version-file }}
        architecture: ${{ inputs.architecture }}
        check-latest: ${{ inputs.check-latest }}
        registry-url: ${{ inputs.registry-url }}
        scope: ${{ inputs.scope }}
        token: ${{ inputs.token }}
        cache: ${{ inputs.cache }}
        cache-dependency-path: ${{ inputs.cache-dependency-path }}
        mirror: ${{ inputs.mirror }}
        mirror-token: ${{ inputs.mirror-token }}
